import streamlit as st
import time
import os
from dotenv import load_dotenv
from groq import Groq
from typing import Annotated, TypedDict
from langchain_groq import ChatGroq
from langchain_community.tools import Tool
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode, tools_condition
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from webdriver_manager.firefox import GeckoDriverManager

# Load environment variables
load_dotenv()
groq_api_key = os.getenv("GROQ_API")

# Initialize LLM
llm = ChatGroq(api_key=groq_api_key, model_name="llama-3.3-70b-versatile")

# Define LangGraph State
class TrackingState(TypedDict):
    messages: Annotated[list, add_messages]

# Cargo Tracking Function (Tool)
def track_cargo(mawb_number: str) -> str:
    """Fetch cargo tracking details for a given MAWB number."""
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")

    driver = webdriver.Firefox(service=Service(GeckoDriverManager().install()), options=options)

    try:
        driver.get("https://www.track-trace.com/aircargo")
        time.sleep(5)

        # Input MAWB number into the search field
        search_box = driver.find_element(By.CSS_SELECTOR, "input[placeholder='Enter number...']")
        search_box.send_keys(mawb_number)

        # Click the track button
        track_button = driver.find_element(By.ID, "wc-multi-form-button_options")
        track_button.click()

        time.sleep(15)
        driver.switch_to.window(driver.window_handles[-1])

        # Switch to iframe
        try:
            iframe_element = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.NAME, "frame-202"))
            )
            driver.switch_to.frame(iframe_element)
        except Exception as e:
            return f"Error: Tracking iframe not found. {e}"

        time.sleep(10)
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(5)

        try:
            tracking_data = driver.find_element(By.TAG_NAME, "body").text
            return f"Tracking Data for MAWB {mawb_number}:\n\n{tracking_data}"
        except Exception as e:
            return f"Error: Unable to extract tracking data. {e}"
    finally:
        driver.quit()

# Wrap cargo tracking function as a Tool
track_cargo_tool = Tool.from_function(
    name="CargoTracker",
    description="Fetch cargo tracking details for a given MAWB number.",
    func=track_cargo
)

# Bind the tool to LLM
llm_with_tools = llm.bind_tools([track_cargo_tool])

# Define chatbot function
def chatbot(state: TrackingState):
    return {"messages": [llm_with_tools.invoke(state["messages"])]}

# Build the LangGraph Agent
graph_builder = StateGraph(TrackingState)
graph_builder.add_node("chatbot", chatbot)
tool_node = ToolNode(tools=[track_cargo_tool])
graph_builder.add_node("tools", tool_node)

graph_builder.add_conditional_edges("chatbot", tools_condition)
graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")

graph = graph_builder.compile()

# Streamlit UI
st.set_page_config(page_title="Agentic Cargo Tracker", layout="wide")
st.title("ðŸ“¦ Agentic Cargo Tracker")

user_input = st.text_input("Enter your query (e.g., Track cargo with MAWB 12345678901):", "")

if st.button("Track"):
    if user_input:
        st.subheader("Agentic Response:")
        with st.spinner("Processing..."):
            events = graph.stream({"messages": [("user", user_input)]}, stream_mode="values")

            for event in events:
                st.write(event["messages"][-1].content)
    else:
        st.warning("Please enter a valid query.")
